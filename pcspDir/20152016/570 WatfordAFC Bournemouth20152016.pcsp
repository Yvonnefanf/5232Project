#import "PAT.Math";

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12; 
#define sidepassLim 3; #define backpassLim 6; var sidepassCount; var backpassCount;// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info

// initial pos here assume we start from goal keeper, we can change it to test if we start from defenders
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley, and Header
enum {SP, LP, LS, FI, VO, HD, DR};
enum {DEF, MID, FOR};
// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
var atkKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];
var atkDefPos = [-1(6), 1, 0, 1, 0, 1, 0, 1, -1(6)];
var atkMidPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var atkForPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var defKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player 
// The guard only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass
AtkKep = [pos[C] == 1]Kep_1(23, 19, C);

// parameters are ShortPass, LongPass, prob. to lose posession, prob. to be fouled
// The fourth parameter is the probability to lose the ball for the attacking team's defender which is based on the
// on the defending team forward's player ratings. 
// In particular, the probability to lose the ball(k here, 3rd parameter here) was a weighted combination of the standing tackle, sliding tackle, and interception FIFA player ratings of the forwards
// The prob. of a foul on the attacking team's defenders was based on the average of the defending team forward's player mentality_aggression ratings. A Higher mentality_aggression rating increases the chances of a foul. 
AtkDef = [pos[R] == 1]Def(65, 67, 31, 22, R)[] [pos[CR] == 1]Def(71, 61, 31, 22, CR)[] [pos[CL] == 1]Def(60, 64, 31, 22, CL)[] [pos[L] == 1]Def(75, 69, 31, 22, L);// parameter is determined by the highest long pass amongst the attacking team's defenders
AtkFreeKickDef = [pos[R] == 1]FKDef(7, R)[] [pos[CR] == 1]FKDef(7, CR)[] [pos[CL] == 1]FKDef(7, CL)[] [pos[L] == 1]FKDef(7, L);
// Similar to defenders, midfielders and forwards have their own specific parameters
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. to lose for the attacking team's forwards is based on the defending team's defenders

// parameters are the ShortPass, LongPass, LongShot, prob. to lose possession, prob. to be fouled, position of midfielder
// The prob. of a foul on the attacking team's midfielders was calculated based on the defending team midfielder's player mentality_aggression ratings. A Higher mentality_aggression rating increases the chances of a foul. 
AtkMid = [pos[RL] == 1]Mid(77, 75, 68,64, 48, RL)[] [pos[C] == 1]Mid(75, 72, 61,64, 48, C)[] [pos[LR] == 1]Mid(75, 72, 69,64, 48, LR);// parameter is determined by the highest skill_fk_accuracy amongst the attacking team's midfielders
AtkFreeKickMid = [pos[RL] == 1]FKMid(6, RL)[] [pos[C] == 1]FKMid(6, C)[] [pos[LR] == 1]FKMid(6, LR);
// parameters are the ShortPass,LongPass,finishing,longshot,volley,header, dribbling,prob. to lose possession,  prob. to be fouled, position
AtkFor = [pos[RL] == 1]For(81, 67,76,72,73,68,86, 74, 72, RL)[] [pos[C] == 1]For(61, 47,74,62,70,64,71, 74, 72, C)[] [pos[LR] == 1]For(69, 43,76,78,66,68,65, 74, 72, LR);// parameter is determined by the highest skill_fk_accuracy amongst the attacking team's forwards
AtkFreeKickFor = [pos[RL] == 1]FKFor(5, RL)[] [pos[C] == 1]FKFor(5, C)[] [pos[LR] == 1]FKFor(5, LR);
///////////// HOME TEAM PLAYERS (Defending Team) /////////////
// Home team defenders, midfielders and forwards are already implicitly "defending" via the prob. to lose the ball parameter
// parameter is gk_handling
DefKep = [pos[C] == 1]Kep_2(72, C);

///////////// Individual Positions /////////////
// There is a guard to every action (e.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at L does a shortPass, the midfielder at R should not be able to receive it
// The eligible players are updated with UpdatePos

//define each player can receive only one backward or side pass



var distToKep = [-1(6), 0, 4, 0, 4, 0, 4, 0, -1(6)];

// call this just means starting from kep-1
Kep_1(sp, lp, p) = [atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1]shortPass -> pcase {
	sp: pass -> UpdatePos(p, SP); AtkDef
	100-sp: intercepted{danger = 5;} -> Skip
} [] [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1]longPass -> pcase {
	lp: pass -> UpdatePos(p, LP); AtkDef
	100-lp: intercepted{danger = 5;} -> Skip
};

// call this just means starting from def
Def(sp, lp, lose, mark, p) = [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]shortPass -> pcase {
	sp: pass -> UpdatePos(p, SP); AtkMid
	mark: pcase { 
		lose: tackled{danger = 4;} -> Skip
		100-lose: foul -> AtkFreeKickDef  
	}
} [] [atkMidPos[p-6] == 1 || atkMidPos[p-5] == 1 || atkMidPos[p-4] == 1 || atkMidPos[p-3] == 1 || atkMidPos[p+3] == 1 || atkMidPos[p+4] == 1 || atkMidPos[p+5] == 1 || atkMidPos[p+6] == 1]longPass -> pcase {
	lp: pass -> UpdatePos(p, LP); AtkMid
	mark: pcase { 
		lose: tackled{danger = 4;} -> Skip
		100-lose: foul -> AtkFreeKickDef  
	}
	// implement side pass for def
} [] [(atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1) && sidepassCount!=sidepassLim]shortSidePass -> pcase {
	sp: pass -> UpdatePos(p, SP); UpdateSideMem();AtkDef
	mark: pcase { 
		lose: tackled{danger = 4;} -> Skip
		100-lose: foul -> AtkFreeKickDef  
	}
} [] [(atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1) && sidepassCount!=sidepassLim]longSidePass -> pcase {
	lp: pass -> UpdatePos(p, LP); UpdateSideMem();AtkDef
	mark: pcase { 
		lose: tackled{danger = 4;} -> Skip
		100-lose: foul -> AtkFreeKickDef  
	}
};

FKDef(successful, p) = [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]shortPass -> pcase {
	successful: pass -> UpdatePos(p, SP); AtkMid
	100-successful: tackled{danger = 4;} -> Skip
} [] [atkMidPos[p-6] == 1 || atkMidPos[p-5] == 1 || atkMidPos[p-4] == 1 || atkMidPos[p-3] == 1 || atkMidPos[p+3] == 1 || atkMidPos[p+4] == 1 || atkMidPos[p+5] == 1 || atkMidPos[p+6] == 1]longPass -> pcase {
	successful: pass -> UpdatePos(p, LP); AtkMid
	100-successful: tackled{danger = 4;} -> Skip
};

Mid(sp, lp, ls, lose, mark, p) = [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortPass -> pcase {
	sp: pass -> UpdatePos(p, SP); AtkFor
	mark: pcase { 
		lose: tackled{danger = 3;} -> Skip
		100-lose: foul -> AtkFreeKickMid  
	}
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longPass -> pcase {
	lp: pass{inAir = true;} -> UpdatePos(p, LP); AtkFor
	mark: pcase { 
		lose: tackled{danger = 3;} -> Skip
		100-lose: foul -> AtkFreeKickMid  
	}
} [] [defKepPos[C] == 1]longShot -> pcase {
	ls/10: shoot -> UpdatePos(p, LS); DefKep
	mark: pcase { 
		lose: tackled{danger = 3;} -> Skip
		100-lose: foul -> AtkFreeKickMid  
	}
	// implement back pass 
} [] [(atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1) && backpassCount!=backpassLim]shortBackPass -> pcase {
	sp: pass -> UpdatePos(p, SP); UpdateBackMem(); AtkDef
	mark: pcase { 
		lose: tackled{danger = 3;} -> Skip
		100-lose: foul -> AtkFreeKickMid  
	}
} [] [(atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 ||atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1)  && backpassCount!=backpassLim]longBackPass -> pcase {
	lp: pass -> UpdatePos(p, LP); UpdateBackMem();AtkDef
	mark: pcase { 
		lose: tackled{danger = 3;} -> Skip
		100-lose: foul -> AtkFreeKickMid  
	}
	// implement side pass
} [] [(atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1)  && sidepassCount!=sidepassLim]shortSidePass -> pcase {
	sp: pass -> UpdatePos(p, SP); UpdateSideMem();AtkMid
	mark: pcase { 
		lose: tackled{danger = 3;} -> Skip
		100-lose: foul -> AtkFreeKickMid  
	}
} [] [(atkMidPos[p-6] == 1 || atkMidPos[p-5] == 1 || atkMidPos[p-4] == 1 || atkMidPos[p-3] == 1 || atkMidPos[p+3] == 1 || atkMidPos[p+4] == 1 || atkMidPos[p+5] == 1 || atkMidPos[p+6] == 1)  && sidepassCount!=sidepassLim]longSidePass -> pcase {
	lp: pass -> UpdatePos(p, LP); UpdateSideMem(); AtkMid
	mark: pcase { 
		lose: tackled{danger = 3;} -> Skip
		100-lose: foul -> AtkFreeKickMid  
	}
};

FKMid(successful, p) = [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortPass -> pcase {
	successful: pass -> UpdatePos(p, SP); AtkFor
	100-successful: tackled{danger = 3;} -> Skip
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longPass -> pcase {
	successful: pass{inAir = true;} -> UpdatePos(p, LP); AtkFor
	100-successful: tackled{danger = 3;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	successful/10: shoot -> UpdatePos(p, LS); DefKep
	100-successful/10: tackled{danger = 3;} -> Skip
};

#define probFactor(rating, dist) rating + call(Pow, 2, 4 - dist);
#define probDr(rating, steps, dist) (rating - call(Pow, steps, 1));
// add d, as dribbling
// currently only forwards move with dribbling, 
//The closer to the goal, the higher the chance of scoring
For(sp, lp, fi, ls, vo, hd, dr, lose, fouled, p) = [defKepPos[C] == 1 && distToKep[p] == 1]finish -> pcase {
	call(probFactor, fi, distToKep[p]): shoot -> UpdatePos(p, FI); DefKep
	lose: tackled{danger = 2;} -> Skip
	fouled: foul -> AtkFreeKickFor
} [] [defKepPos[C] == 1 && distToKep[p] > 1]longShot -> pcase {
	call(probFactor, ls, distToKep[p]): shoot -> UpdatePos(p, LS); DefKep
	lose: tackled{danger = 2;} -> Skip
	fouled: foul -> AtkFreeKickFor
} [] [defKepPos[C] == 1 && inAir == true]volley -> pcase {
	call(probFactor, vo, distToKep[p]): shoot -> UpdatePos(p, VO); DefKep
	lose: tackled{danger = 2;} -> Skip
	fouled: foul -> AtkFreeKickFor
} [] [defKepPos[C] == 1 && inAir == true]header -> pcase {
	call(probFactor, hd, distToKep[p]): shoot -> UpdatePos(p, HD); DefKep
	lose: tackled{danger = 2;} -> Skip
	fouled: foul -> AtkFreeKickFor
} [] [(defKepPos[C] == 1 && inAir == false) && distToKep[p] ==2]dribbling -> pcase {
	call(probDr, dr, 2, distToKep[p]): dribble -> UpdatePos(p, dr); UpdateForDistToKep(p,2); AtkFor
	call(probDr, dr, 1, distToKep[p]): dribble -> UpdatePos(p, dr); UpdateForDistToKep(p,1); AtkFor
	lose: tackled{danger = 2;} -> Skip
	fouled: foul -> AtkFreeKickFor
} [] [(defKepPos[C] == 1 && inAir == false) && distToKep[p] ==3]dribbling -> pcase {
	call(probDr, dr, 3, distToKep[p]): dribble -> UpdatePos(p, dr); UpdateForDistToKep(p,3); AtkFor
	call(probDr, dr, 2, distToKep[p]): dribble -> UpdatePos(p, dr); UpdateForDistToKep(p,2); AtkFor
	call(probDr, dr, 1, distToKep[p]): dribble -> UpdatePos(p, dr); UpdateForDistToKep(p,1); AtkFor
	lose: tackled{danger = 2;} -> Skip
	fouled: foul -> AtkFreeKickFor
}[] [(defKepPos[C] == 1 && inAir == false) && distToKep[p] == 4]dribbling -> pcase {
	call(probDr, dr, 4, distToKep[p]): dribble -> UpdatePos(p, dr); UpdateForDistToKep(p,4); AtkFor
	call(probDr, dr, 3, distToKep[p]): dribble -> UpdatePos(p, dr); UpdateForDistToKep(p,3); AtkFor
	call(probDr, dr, 2, distToKep[p]): dribble -> UpdatePos(p, dr); UpdateForDistToKep(p,2); AtkFor
	call(probDr, dr, 1, distToKep[p]): dribble -> UpdatePos(p, dr); UpdateForDistToKep(p,1); AtkFor
	lose: tackled{danger = 2;} -> Skip
	fouled: foul -> AtkFreeKickFor
};

FKFor(successful, p) = [defKepPos[C] == 1]finish -> pcase {
	successful: shoot -> UpdatePos(p, FI); DefKep
	100-successful: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1]longShot -> pcase {
	successful: shoot -> UpdatePos(p, LS); DefKep
	100-successful: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1 && inAir == true]volley -> pcase {
	successful: shoot -> UpdatePos(p, VO); DefKep
	100-successful: tackled{danger = 2;} -> Skip
} [] [defKepPos[C] == 1 && inAir == true]header -> pcase {
	successful: shoot -> UpdatePos(p, HD); DefKep
	100-successful: tackled{danger = 2;} -> Skip
};

Kep_2(i, p) = attemptSave -> pcase {
	i: save{danger = 1;} -> Skip
	100-i: concede -> Skip
};

UpdateSideMem() ={sidepassCount++}->Skip;

UpdateBackMem() ={backpassCount++}->Skip;

UpdateForDistToKep(player_pos, steps) = case {
	player_pos > steps: {distToKep[player_pos]=distToKep[player_pos]-steps  } -> Skip
};

UpdatePos(p, e) = case {
	p == L: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == DR: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == LR:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == DR: {pos[L] = 0; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == CL: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == DR: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == C:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			e == DR: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}	
	p == CR:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == DR: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == RL:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == DR: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == DR: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

#define Goal0 danger <= 0;
#assert AtkKep |= F G Goal0 with prob;
